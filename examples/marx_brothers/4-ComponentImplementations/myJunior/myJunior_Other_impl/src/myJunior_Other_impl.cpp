/**
* Copyright (c) 2023 Dassault Aviation
*
* SPDX-License-Identifier: MIT
*
* Generated by : LDP 1.0.0    
*                date: 2022-04-01 10:48:02.047975    
*/


/* Module Implementation myJunior_Other_impl */

#include "ECOA.hpp"
#include "myJunior_Other_impl.hpp"


#include "ECOA.hpp"
#include "libmarx.hpp"

#include <string.h>
#include <stdio.h>
#include <stdarg.h>

#include <pthread.h>
#include <unistd.h>
#include <myJunior_External_Interface.hpp>

#define MTRACE    0
#define MDEBUG    1
#define MINFO     2
#define MWARNING  3


static void *
cpp_thread_function (void *p_data)
{
  while (1)
    {
      sleep (1);
      myJunior_External_Interface::FeedbackLegacy (128);
    }
  return NULL;
}


namespace myJunior_Other_impl
{


void
log (myJunior_Other_impl::Module *mod , int level, const char *msg, ...)
{
  ECOA::log log;
  va_list argp;

  va_start (argp, msg);
  vsnprintf ((char *) &log.data, ECOA::LOG_MAXSIZE, msg, argp);
  va_end (argp);
  log.current_size = strnlen ((char *) &log.data, ECOA::LOG_MAXSIZE);
  switch (level)
    {
    case MTRACE:
      mod->container->log_trace (log);
      break;
    case MDEBUG:
      mod->container->log_debug (log);
      break;
    case MINFO:
      mod->container->log_info (log);
      break;
    case MWARNING:
      mod->container->log_warning (log);
      break;
    default:
      mod->container->log_trace (log);
    }
}

/* Entry points for lifecycle operations */

void Module::INITIALIZE__received(){
  int result = 0;

  result = pthread_create (&this->user.thread_handle, NULL, cpp_thread_function, NULL);
  if (result != 0)
    {
      myJunior_Other_impl::log (this, MWARNING, "Error when creating the thread (%s)", strerror (result));
    }

}

void Module::START__received(){
	/* @TODO TODO - To be implemented */
}

void Module::STOP__received(){
	/* @TODO TODO - To be implemented */
}

void Module::SHUTDOWN__received(){
	/* @TODO TODO - To be implemented */
}

void Module::TheFeedback__received(const ECOA::uint32 param){
  myJunior_Other_impl::log (this, MTRACE, "External Feedback C++ from legacy code %d", param);
}

void Module::TheFeedback_Other__received(const ECOA::uint32 param){
  myJunior_Other_impl::log (this, MTRACE, "External Feedback_Other C from legacy code %d", param);
}

void Module::result__received(const ECOA::int32 param){
	/* @TODO TODO - To be implemented */
}

/* Fault Handling API , linked to another namespace (fault_handler_impl_name) */

extern "C" {

	Module* myJunior_Other_impl__new_instance()
	{
		return new Module();
	}
}

} /* namespace myJunior_Other_impl */
