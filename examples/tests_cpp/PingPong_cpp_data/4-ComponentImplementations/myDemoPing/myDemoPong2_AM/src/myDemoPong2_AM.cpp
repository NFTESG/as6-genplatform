/* Generated by PARSEC */
/* Module Implementation for myDemoPong2_AM
Done by Florian using Jinja */

#include "ECOA.hpp"


#include "mylib.hpp"

#include <assert.h>
#include <stdio.h>
#include "ldp_mod_container_util.h"
#include <stdarg.h>
#include "myDemoPong2_AM.hpp"


namespace myDemoPong2_AM
{

/* Entry points for lifecycle operations */
void Module::INITIALIZE__received(){
/* @TODO TODO - To be implemented */
}
void Module::START__received(){
/* @TODO TODO - To be implemented */
}
void Module::STOP__received(){
/* @TODO TODO - To be implemented */
}
void Module::SHUTDOWN__received(){
/* @TODO TODO - To be implemented */
}



void Module::read_coord0__updated()
{
	read_coord0_handle data_handle2;
	(this->container)->read_coord0__get_read_access(data_handle2);

	mylib::coord* lu = data_handle2.data;
	assert((lu->x >= 42 and lu->y == lu->x +100));

	(this->container)->read_coord0__release_read_access(data_handle2);
}


void Module::Ping__received(  const mylib::coord& recordwithping, const mylib::t1 nb_ping, const mylib::Test_array& arraywithping, const mylib::Test_fixed_array& fixedarraywithping, const mylib::Test_enum enumwithping)
{
	assert( arraywithping.data[0] == 61);
	assert( arraywithping.data[arraywithping.current_size -1] == 65);
	assert(fixedarraywithping[0] == 7);
	assert(fixedarraywithping[mylib::Test_fixed_array_MAXSIZE - 1] == 18);
	assert(enumwithping.value == 1);

	if (nb_ping != 999){

		mylib::coord recordwithpong_val;
		recordwithpong_val.x = recordwithping.x;
		recordwithpong_val.y = recordwithping.y;
		recordwithpong_val.x +=2;
		recordwithpong_val.y +=2;

		mylib::t1 nb_pong = nb_ping;
		nb_pong += 2;

		(this->container)->Pong__send(recordwithpong_val, nb_pong, arraywithping, fixedarraywithping, enumwithping);
	}
}


/* Fault Handling API , linked to another namespace (fault_handler_impl_name) */

extern "C" {

	Module* myDemoPong2_AM__new_instance()
	{
		return new Module();
	}
}

} /* namespace myDemoPong2_AM */
