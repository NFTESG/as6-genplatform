/* Generated by PARSEC */
/* Module Implementation for myDemoPing_AM_cpp
Done by Florian using Jinja */

#include "ECOA.hpp"


#include "pingpong.hpp"
#include "assert.h"
#include <string.h>
#include <stdio.h>
//#include "ldp_structures.h"
#include "myDemoPing_AM_cpp.hpp"



namespace myDemoPing_AM_cpp
{

/* Entry points for lifecycle operations */void Module::INITIALIZE__received(){
/* @TODO TODO - To be implemented */
}
void Module::START__received(){
	ECOA::byte memory_address[128];
	ECOA::uint32 out_size;

	/// private_pinfo_2
	ECOA::seek_whence_type seek_type;
	seek_type = ECOA::seek_whence_type::ECOA_SEEK_SET;
	container->seek_private_pinfo_2( 5, seek_type, &out_size);

	 // == ECOA::return_status::OK);
	assert(out_size == 5);
	container->read_private_pinfo_2( memory_address, 5, &out_size);
	assert(out_size == 5);
	assert(strncmp((char*)memory_address,"common",out_size) == 0);

	/// private_pinfo_1
	assert(container->seek_private_pinfo_1( 5, seek_type, &out_size) == ECOA::return_status::OK);
	assert(out_size == 5);
	container->read_private_pinfo_1( memory_address, 6, &out_size);
	assert(out_size == 6);
	assert(strncmp((char*)memory_address,"ping 2",out_size)==0);

	/// public_pinfo_2
	assert(container->seek_public_pinfo_2( 5, seek_type, &out_size) == ECOA::return_status::OK);
	assert(out_size == 5);
	container->read_public_pinfo_2( memory_address, 21, &out_size);
	assert(out_size == 21);
	assert(strncmp((char*)memory_address,"assembly_pinfo_common",out_size) == 0);

	/// public_pinfo_1
	assert(container->seek_public_pinfo_1( 5, seek_type, &out_size) == ECOA::return_status::OK);
	assert(out_size == 5);
	container->read_public_pinfo_1( memory_address, 21, &out_size);
	assert(strncmp((char*)memory_address,"component_pinfo_2",out_size)==0);

	ECOA::log log;
	snprintf(log.data, ECOA::LOG_MAXSIZE,  "CPP: checked Pinfos : SUCCESS");
	container->log_trace( log);

}
void Module::STOP__received(){
/* @TODO TODO - To be implemented */
}
void Module::SHUTDOWN__received(){
/* @TODO TODO - To be implemented */
}



void Module::TriggerPingEvent__received()
{
}


void Module::Pong__received()
{
}


/* Fault Handling API , linked to another namespace (fault_handler_impl_name) */

extern "C" {

	Module* myDemoPing_AM_cpp__new_instance()
	{
		return new Module();
	}
}

} /* namespace myDemoPing_AM_cpp */
