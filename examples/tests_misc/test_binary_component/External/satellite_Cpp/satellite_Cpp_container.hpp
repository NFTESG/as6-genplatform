 /*
  * @file satellite_Cpp_container.hpp
  * This is the Module Container header for Module / Container Interface Class Header
  * This file is generated by the ECOA tools and shall not be modified"
  */
  /* Generated by PARSEC */

#if !defined(_SATELLITE_CPP_CONTAINER_HPP)
#define _SATELLITE_CPP_CONTAINER_HPP

 /* Standard types */
#include <ECOA.hpp>


/*Additionnaly created types*/
#include "ECOA.hpp"
#include "myLib.hpp"

/*Container types*/
#include "satellite_Cpp_container_types.hpp"

/* User context */
#include "satellite_Cpp_user_context.hpp"
namespace satellite_Cpp
{

class Container
{
    public:

        /* Logging and fault management API */
        void  log_trace (const ECOA::log &log);
        void  log_debug (const ECOA::log &log);
        void  log_info (const ECOA::log &log);
        void  log_warning (const ECOA::log &log);
        void  raise_error (const ECOA::log &log);
        void  raise_fatal_error (const ECOA::log &log);

        /*Time services API */
        void get_relative_local_time(ECOA::hr_time& relative_local_time);

        ECOA::return_status get_UTC_time(ECOA::global_time& utc_time);
        ECOA::return_status get_absolute_system_time(ECOA::global_time& absolute_system_time);

        /* Time resolution services API */
        void get_relative_local_time_resolution(ECOA::duration& relative_local_time_resolution);
        void get_UTC_time_resolution(ECOA::duration& utc_time_resolution);
        void get_absolute_system_time_resolution(ECOA::duration& absolute_system_time_resolution);

        /* Optional API for saving the warm start context */
        void save_warm_start_context();

        /* APIs generated */

        void send_data__send(const myLib::array_data& data, const ECOA::uint32 satellite_num);
        ECOA::return_status satellite_position__response_send(const ECOA::uint32 ID, const myLib::position& data, const ECOA::uint32 satellite_num);
        /* Properties API */
        void get_satellite_num_value(ECOA::uint32& value);

        /* PINFO API */

        // If this is a Fault Handler module, then an additional API is declared: Recovery Action API
        ECOA::return_status recovery_action(ECOA::recovery_action_type recovery_action, ECOA::asset_id asset_id, ECOA::asset_type asset_type);

        // Other container technical data will accessible through the incomplete structured defined here
        struct platform_hook;

        // The constructor of the Container shall have the following signature
        Container(platform_hook* hook);

    private:

        // private data for this container implementation is declared as a private struct within the implementation
        platform_hook* hook;

}; /* Class Container */

} /* namespace satellite_Cpp*/

#endif /* SATELLITE_CPP_CONTAINER_HPP */