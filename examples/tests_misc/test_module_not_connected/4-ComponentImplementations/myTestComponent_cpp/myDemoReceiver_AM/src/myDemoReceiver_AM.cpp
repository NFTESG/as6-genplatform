/* Generated by PARSEC */
/* Module Implementation for myDemoReceiver_AM*/

#include <assert.h>


#include "ECOA.hpp"
#include "lib_module.hpp"
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "myDemoReceiver_AM.hpp"

namespace myDemoReceiver_AM
{

/* Entry points for lifecycle operations */

void Module::INITIALIZE__received(){
  user.event_received         = 0x00;
  user.request_sync_received  = 0x00;
  user.request_async_received = 0x00;
  user.vd_notif_received      = 0x00;
}

void Module::START__received(){
  ECOA::uint32 property_identifier;
  container->get_module_identifier_value(property_identifier);

  if(property_identifier == 0x04 ||property_identifier == 0x05){
    //try to read a not connected data
    read_data_handle handle;
    ECOA::return_status ret = container->read_data__get_read_access(handle);
    assert(ret == ECOA::return_status::NO_DATA);
  }
}

static void check_finish(Container* container, user_context* user) {
  if (user->request_async_received == 0x01 &&
      user->request_sync_received  == 0x01 &&
      user->event_received         == 0x01 &&
      user->vd_notif_received      == 0x01){
    container->Finish_Sent__send();
  }
}

static void print_log(Container* container, const char *format, ...){
    va_list vl;
    ECOA::log log;

    va_start(vl, format);
    vsnprintf(log.data, ECOA::LOG_MAXSIZE, format, vl);
    va_end( vl);

  container->log_trace(log);
}

void Module::STOP__received(){
    /* @TODO TODO - To be implemented */
}

void Module::SHUTDOWN__received(){
    /* @TODO TODO - To be implemented */
}

void Module::Event_Received__received(const ECOA::uint32 module_implementation_identifier){
  ECOA::uint32 property_identifier;
  container->get_module_identifier_value(property_identifier);
  assert(property_identifier == 0x03);

  if (module_implementation_identifier == 0x01){
    user.event_received = 0x01;
    print_log(container, "'myDemoReceiver_AM__Event_Received__received' [RECEIVED] with identifier  [%d]", module_implementation_identifier);
  } else {
    print_log(container, "[ERROR] Received -- Event_Received -- from module identifier [%d]", module_implementation_identifier);
    assert(0);
  }

  check_finish(container, &user);
}

void Module::Request_Async_Received__request_received(const ECOA::uint32 ID, const ECOA::uint32 module_implementation_identifier){
    ECOA::uint32 property_identifier;
  container->get_module_identifier_value(property_identifier);
  assert(property_identifier == 0x03);

  if (module_implementation_identifier == 0x01){
    user.request_async_received = 0x01;
    print_log(container, "myDemoReceiver_AM__Request_Async_Received__received [RECEIVED] with identifier  [%d]", module_implementation_identifier);
  } else {
    print_log(container, "[ERROR] Received -- Request_Async_Received -- from module identifier [%d]", module_implementation_identifier);
    assert(0);
  }

  assert(container->Request_Async_Received__response_send(ID) == ECOA::return_status::OK);
  check_finish(container, &user);
}

void Module::Request_Sync_Received__request_received(const ECOA::uint32 ID, const ECOA::uint32 module_implementation_identifier){
  ECOA::uint32 property_identifier;
  container->get_module_identifier_value( property_identifier);
  assert(property_identifier == 0x03);

  if (module_implementation_identifier == 0x01){
    user.request_sync_received = 0x01;
    print_log(container, "'myDemoReceiver_AM__Request_Sync_Received__received' [RECEIVED] with identifier [%d]", module_implementation_identifier);
  } else {
    print_log(container, "[ERROR] Received -- Request_Sync_Received -- from module identifier [%d]", module_implementation_identifier);
    assert(0);
  }

  assert(container->Request_Sync_Received__response_send(ID) == ECOA::return_status::OK);

  check_finish(container, &user);
}

void Module::read_data__updated(){
 ECOA::uint32 property_identifier;
  container->get_module_identifier_value(property_identifier);
  assert(property_identifier == 0x03);

  ECOA::uint32 data = 0x00;
  read_data_handle handle;

  ECOA::return_status ret = container->read_data__get_read_access(handle);
  assert(ret == ECOA::return_status::OK);

  memcpy(&data,handle.data,sizeof(ECOA::uint32));

  if (data == 0x01 && user.vd_notif_received == 0x00){
    user.vd_notif_received = 0x01;
    check_finish(container, &user);
  } else {
    assert(0);
  }

  ret = container->read_data__release_read_access(handle);
  assert(ret == ECOA::return_status::OK);
}


/* Fault Handling API , linked to another namespace (fault_handler_impl_name) */

extern "C" {

    Module* myDemoReceiver_AM__new_instance()
    {
        return new Module();
    }
}

} /* namespace myDemoReceiver_AM */
