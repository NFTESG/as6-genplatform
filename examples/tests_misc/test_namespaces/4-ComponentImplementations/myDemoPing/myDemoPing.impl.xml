<componentImplementation
    xmlns="http://www.ecoa.technology/implementation-2.0" componentDefinition="Ping">

    <!-- list of used libraries -->
  <use library="libRoot"/>
  <use library="libRoot.level1A"/>

  <!-- supervision module -->

  <!-- module AM to implement provided operations -->
  <moduleType name="myDemoPing_AM_t">
    <properties>
      <property name="property1" type="libRoot.level1A:simple1B"/>
      <property name="property2_complex" type="libRoot.level1A:array_1A"/>
      <property name="property_Pi" type="double64"/>
    </properties>


    <operations>
      <eventSent name="event_sent">
        <input name="param1" type="libRoot.level1A:simple1B"/>
        <input name="param2" type="uint32"/>
        <input name="param3" type="libRoot:array_1A"/>
      </eventSent>

      <eventReceived name="external_event">
        <input name="param1" type="libRoot.level1A:simple1B"/>
        <input name="param2" type="uint32"/>
        <input name="param3" type="libRoot:array_1A"/>
      </eventReceived>

      <requestSent name="sync_req" isSynchronous="true" timeout="1">
        <input name="in_param1" type="libRoot.level1A:simple1B"/>
        <input name="in_param2" type="uint32"/>
        <input name="in_param3" type="libRoot:array_1A"/>
        <output name="out_param1" type="libRoot.level1A:simple1B"/>
        <output name="out_param2" type="uint32"/>
        <output name="out_param3" type="libRoot:array_1A"/>
        <output name="out_bool" type="boolean8"/>
      </requestSent>

      <requestSent name="async_req" isSynchronous="false" timeout="1">
        <input name="in_param1" type="libRoot.level1A:simple1B"/>
        <input name="in_param2" type="uint32"/>
        <input name="in_param3" type="libRoot:array_1A"/>
        <output name="out_param1" type="libRoot.level1A:simple1B"/>
        <output name="out_param2" type="uint32"/>
        <output name="out_param3" type="libRoot:array_1A"/>
                <output name="out_bool" type="boolean8"/>
      </requestSent>

      <dataRead name="data_r1" type="libRoot.level1A:simple1B"/>
      <dataRead name="data_r2" type="uint32"/>
      <dataRead name="data_r3" type="libRoot:array_1A"/>


    </operations>
  </moduleType>


  <moduleImplementation name="myDemoPing_AM" language="C" moduleType="myDemoPing_AM_t"/>
  <moduleImplementation name="myDemoPing_AM_cpp" language="C++" moduleType="myDemoPing_AM_t"/>

  <moduleInstance name="myDemoPing_AM_I_cpp" implementationName="myDemoPing_AM_cpp" relativePriority="100">
    <propertyValues>
        <propertyValue name="property1">13</propertyValue>
        <propertyValue name="property_Pi">%libRoot.level1A:Pi_level1A%</propertyValue>
        <propertyValue name="property2_complex">[1,2,3,4,#*:5]</propertyValue>
    </propertyValues>
  </moduleInstance>

  <moduleInstance name="myDemoPing_AM_I" implementationName="myDemoPing_AM" relativePriority="100">
    <propertyValues>
        <propertyValue name="property1">12</propertyValue>
        <propertyValue name="property_Pi">%libRoot.level1A:Pi_level1A%</propertyValue>
        <propertyValue name="property2_complex">[1,2,3,#*:4]</propertyValue>
    </propertyValues>
  </moduleInstance>

  <eventLink>
    <senders>
      <moduleInstance instanceName="myDemoPing_AM_I" operationName="event_sent"/>
      <moduleInstance instanceName="myDemoPing_AM_I_cpp" operationName="event_sent"/>
    </senders>
    <receivers>
      <reference instanceName="PingPong" operationName="Ping"/>
    </receivers>
  </eventLink>

  <eventLink>
    <senders>
      <external operationName="external_event" language="C"/>
    </senders>
    <receivers>
      <moduleInstance instanceName="myDemoPing_AM_I" operationName="external_event"/>
      <moduleInstance instanceName="myDemoPing_AM_I_cpp" operationName="external_event"/>
    </receivers>
  </eventLink>

  <dataLink>
    <writers>
      <reference instanceName="PingPong" operationName="data_1"/>
    </writers>
    <readers>
      <moduleInstance instanceName="myDemoPing_AM_I" operationName="data_r1"/>
      <moduleInstance instanceName="myDemoPing_AM_I_cpp" operationName="data_r1"/>
    </readers>
  </dataLink>
  <dataLink>
    <writers>
      <reference instanceName="PingPong" operationName="data_2"/>
    </writers>
    <readers>
      <moduleInstance instanceName="myDemoPing_AM_I" operationName="data_r2"/>
      <moduleInstance instanceName="myDemoPing_AM_I_cpp" operationName="data_r2"/>
    </readers>
  </dataLink>
  <dataLink>
    <writers>
      <reference instanceName="PingPong" operationName="data_3"/>
    </writers>
    <readers>
      <moduleInstance instanceName="myDemoPing_AM_I" operationName="data_r3"/>
      <moduleInstance instanceName="myDemoPing_AM_I_cpp" operationName="data_r3"/>
    </readers>
  </dataLink>

  <requestLink>
    <clients>
      <moduleInstance instanceName="myDemoPing_AM_I_cpp" operationName="sync_req"/>
      <moduleInstance instanceName="myDemoPing_AM_I" operationName="sync_req"/>
    </clients>
    <server>
      <reference instanceName="PingPong" operationName="RR_C"/>
    </server>
  </requestLink>
  <requestLink>
    <clients>
      <moduleInstance instanceName="myDemoPing_AM_I_cpp" operationName="async_req"/>
      <moduleInstance instanceName="myDemoPing_AM_I" operationName="async_req"/>
    </clients>
    <server>
      <reference instanceName="PingPong" operationName="RR_Cpp"/>
    </server>
  </requestLink>
</componentImplementation>
