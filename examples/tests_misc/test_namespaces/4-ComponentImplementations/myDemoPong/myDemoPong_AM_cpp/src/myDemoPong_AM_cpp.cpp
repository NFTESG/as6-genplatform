/* Generated by PARSEC */
/* Module Implementation for myDemoPong_AM_cpp*/

#include "ECOA.hpp"
#include "myDemoPong_AM_cpp.hpp"


#include "ECOA.hpp"
#include "libRoot__level1A.hpp"
#include "libRoot.hpp"

#include "assert.h"
#include "stdio.h"
namespace myDemoPong_AM_cpp
{

/* Entry points for lifecycle operations */

void Module::INITIALIZE__received(){
    /* @TODO TODO - To be implemented */
}

void Module::START__received(){
    /* @TODO TODO - To be implemented */
}

void Module::STOP__received(){
    /* @TODO TODO - To be implemented */
}

void Module::SHUTDOWN__received(){
    /* @TODO TODO - To be implemented */
}

void Module::event_received__received(const libRoot::level1A::simple1B param1, const ECOA::uint32 param2, const libRoot::array_1A& param3){
    /* @TODO TODO - To be implemented */
    printf("event cpp\n");
}

void Module::received_req__request_received(const ECOA::uint32 ID,
    const libRoot::level1A::simple1B in_param1,
    const ECOA::uint32 in_param2,
    const libRoot::array_1A& in_param3){
    ECOA::boolean8 out_bool = ECOA::FALSE;
    ECOA::return_status res = container->received_req__response_send(ID, in_param1, in_param2,in_param3, out_bool);
    assert(res == ECOA::return_status::OK);

}


/* Fault Handling API , linked to another namespace (fault_handler_impl_name) */

extern "C" {

    Module* myDemoPong_AM_cpp__new_instance()
    {
        return new Module();
    }
}

} /* namespace myDemoPong_AM_cpp */
